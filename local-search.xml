<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>旧项目接入qiankun微前端方案实践</title>
    <link href="/2021/03/13/hello-world/"/>
    <url>/2021/03/13/hello-world/</url>
    
    <content type="html"><![CDATA[<h3 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h3><p>这里先放一个官方文档链接：<a href="https://qiankun.umijs.org/zh/guide/getting-started">qiankun</a><br>基本的操作，包括各种接入调用，基础配置啥的，感兴趣的同学，可以自行点击上面的官网链接查看。<br>这里，我主要阐述一下，把<a href="">二次开发平台</a>作为主应用，如何与业务子应用对接开发。</p><h3 id="2、在主应用中注册微应用"><a href="#2、在主应用中注册微应用" class="headerlink" title="2、在主应用中注册微应用"></a>2、在主应用中注册微应用</h3><p>每增加一个子应用都要配置一个对象</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">registerMicroApps([<br>  &#123;<br>    name: <span class="hljs-string">&#x27;react app&#x27;</span>, <span class="hljs-regexp">//</span> 子应用名称<br>    entry: <span class="hljs-string">&#x27;//localhost:7100&#x27;</span>,  <span class="hljs-regexp">//</span> 子应用访问域名<br>    container: <span class="hljs-string">&#x27;#yourContainer&#x27;</span>, <span class="hljs-regexp">//</span> 子应用放置节点id<br>    activeRule: <span class="hljs-string">&#x27;/yourActiveRule&#x27;</span>, <span class="hljs-regexp">//</span> 路由规则<br>  &#125;<br>]);<br><br></code></pre></td></tr></table></figure><p>这里面 container 是给装子应用的容器，一般是 div 给个 ID 就行，具体放在哪个页面，由你自己的业务决定。<br>activeRule 是路由规则，根据路由模式决定，下面会着重讲。</p><h3 id="3、关于-activeRule（路由规则），主应用和子应用分别怎么设置"><a href="#3、关于-activeRule（路由规则），主应用和子应用分别怎么设置" class="headerlink" title="3、关于 activeRule（路由规则），主应用和子应用分别怎么设置"></a>3、关于 activeRule（路由规则），主应用和子应用分别怎么设置</h3><p>由于<a href="">二次开发平台</a>的路由一直以来选用的是 hash 模式，所以目前不管是子应用还是二次开发平台主应用，都只推荐是用 hash 模式，才能更平滑且低成本低的接入 qiankun 微前端方案。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts">registerMicroApps([<br>  &#123;<br><span class="hljs-symbol">    name:</span> <span class="hljs-string">&quot;vueApp&quot;</span>,<br><span class="hljs-symbol">    entry:</span> <span class="hljs-string">&quot;//192.168.20.49:8080&quot;</span>,<br><span class="hljs-symbol">    container:</span> <span class="hljs-string">&quot;#appContainer&quot;</span>,<br><span class="hljs-symbol">    activeRule:</span> <span class="hljs-string">&quot;/#/micro/app-vue&quot;</span><br>  &#125;<br>]);<br></code></pre></td></tr></table></figure><p>这是我本地的一个 demo 例子，点击菜单打开子应用，那就在本身的路由视图那里加一个 id 为 appContainer 的 div，双方都用 hash 模式，activeRule 要加上’/#/‘，micro 是我单独给子应用加的一个路由目录。</p><h3 id="4、子应用设置"><a href="#4、子应用设置" class="headerlink" title="4、子应用设置"></a>4、子应用设置</h3><p>main.js 参照官网，在顶部加入<code>import &quot;./public-path&quot;;</code>文件内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.__POWERED_BY_QIANKUN__) &#123;<br>  <span class="hljs-comment">// eslint-disable-next-line no-undef</span><br>  __webpack_public_path__ = <span class="hljs-built_in">window</span>.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;<br>&#125;<br></code></pre></td></tr></table></figure><p>其次，在 main.js 文件中加入代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> router = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">let</span> instance = <span class="hljs-literal">null</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params">props = &#123;&#125;</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> &#123; container &#125; = props;<br>  router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    <span class="hljs-comment">// base: window.__POWERED_BY_QIANKUN__ ? &quot;/app-vue/&quot; : &quot;/&quot;,</span><br>    routes,<br>  &#125;);<br><br>  <span class="hljs-comment">// 判断 qiankun 环境则进行路由拦截，判断跳转路由是否有 /micro 开头前缀，没有则加上</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.__POWERED_BY_QIANKUN__) &#123;<br>    router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (!to.path.includes(<span class="hljs-string">&quot;/micro&quot;</span>)) &#123;<br>        next(&#123;<br>          path: <span class="hljs-string">&quot;/micro/app-vue&quot;</span> + to.path,<br>        &#125;);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        next();<br>      &#125;<br>    &#125;);<br>  &#125;<br><br>  instance = <span class="hljs-keyword">new</span> Vue(&#123;<br>    router,<br>    store,<br>    render: <span class="hljs-function">(<span class="hljs-params">h</span>) =&gt;</span> h(App),<br>  &#125;).$mount(<br>    container ? container.querySelector(<span class="hljs-string">&quot;#operatMicroApp&quot;</span>) : <span class="hljs-string">&quot;#operatMicroApp&quot;</span><br>  );<br>&#125;<br><span class="hljs-comment">// 独立运行时</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">window</span>.__POWERED_BY_QIANKUN__) &#123;<br>  render();<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bootstrap</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[vue] vue app bootstraped&quot;</span>);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mount</span>(<span class="hljs-params">props</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[vue] props from main framework&quot;</span>, props);<br>  render(props);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unmount</span>(<span class="hljs-params"></span>) </span>&#123;<br>  instance.$destroy();<br>  instance.$el.innerHTML = <span class="hljs-string">&quot;&quot;</span>;<br>  instance = <span class="hljs-literal">null</span>;<br>  router = <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，需要在路由文件中加入跟主应用一样路由匹配规则，上述中规则是<code>activeRule: &quot;/#/micro/app-vue&quot;</code>，所以如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../views/Home.vue&quot;</span>;<br><br><span class="hljs-keyword">let</span> prefix = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-comment">// 判断是 qiankun 环境则增加路由前缀</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.__POWERED_BY_QIANKUN__) &#123;<br>  prefix = <span class="hljs-string">&quot;/micro/app-vue&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    path: prefix + <span class="hljs-string">&quot;/&quot;</span>,<br>    name: <span class="hljs-string">&quot;home&quot;</span>,<br>    component: Home,<br>  &#125;,<br>  &#123;<br>    path: prefix + <span class="hljs-string">&quot;/about&quot;</span>,<br>    name: <span class="hljs-string">&quot;about&quot;</span>,<br>    <span class="hljs-comment">// route level code-splitting</span><br>    <span class="hljs-comment">// this generates a separate chunk (about.[hash].js) for this route</span><br>    <span class="hljs-comment">// which is lazy-loaded when the route is visited.</span><br>    component: <span class="hljs-function">() =&gt;</span><br>      <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="hljs-string">&quot;../views/About.vue&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> routes;<br></code></pre></td></tr></table></figure><p>看到这里，你应该明白了，路由规则得保持跟主应用中一致，才能保证命中。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
